# Copyright (c) 2014, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 

import os

Import('env')

if not env.has_key('GTEST_DIR'):
    print('GTEST_DIR not specified skipping unit test build for securitymgr core')
else:
 
    secmgrgtest_env = env.Clone();
    gtest_dir = secmgrgtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(secmgrgtest_env)

    if gtest_dir == '/usr':
        gtest_src_base = os.path.join(gtest_dir, 'src', 'gtest')
    else:
        gtest_src_base = gtest_dir

    if secmgrgtest_env['OS_GROUP'] == 'windows':
        # gTest does not require the same CPPDEFINES as AllJoyn core.
        secmgrgtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        # don't use the _DEBUG define unless the /MDd compiler flag is specified
        #secmgrgtest_env.Append(CPPDEFINES = ['WIN32', '_DEBUG', '_LIB'])
        secmgrgtest_env.Append(CXXFLAGS = ['/EHsc'])

    if secmgrgtest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        secmgrgtest_env.Append(CPPDEFINES = ['ANDROID'])

    # tr1::tuple is not avalible for android or darwin
    if secmgrgtest_env['OS_CONF'] in [ 'android', 'darwin' ]:
        secmgrgtest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    # clone() library function is NOT available on android-x86
    if secmgrgtest_env['OS_CONF'] == 'android' and secmgrgtest_env['CPU'] == 'x86':
        secmgrgtest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    # Microsoft Visual Studio 2012 has a different _VARIADIC_MAX default value.
    # See: http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx
    if secmgrgtest_env['OS_CONF'] == 'windows' and (secmgrgtest_env['MSVC_VERSION'] == '11.0' or secmgrgtest_env['MSVC_VERSION'] == '11.0Exp'):
        secmgrgtest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])
    #we compile with no rtti and we are not using exceptions. 
    secmgrgtest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    # we replace AllJoyn's include CPPPATH options.  AllJoyn includes stlport that will cause the
    # gTest code to not compile as expected at this time
    secmgrgtest_env.Append(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        secmgrgtest_env.Append(CPPPATH = [ secmgrgtest_env.Dir('$GTEST_DIR/include') ])

    gtest_obj = secmgrgtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    secmgrgtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    test_src = secmgrgtest_env.Glob('*.cc')
    if secmgrgtest_env['OS_GROUP'] == 'windows':
        # to avoid unicode compilation issues
        test_src = [f for f in test_src if os.path.basename(f.path) != 'CertificateGenerationTests.cc']

    unittest_env = secmgrgtest_env.Clone()
#   unittest_env.Prepend(LIBS = unittest_env['ALLJOYN_C_LIB_STATIC'])

    if unittest_env['BR'] == 'on':
        # Build apps with bundled daemon support
        unittest_env.Prepend(LIBS = [unittest_env['brobj'], unittest_env['ajrlib']])

    gtest_dir = unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    if unittest_env['OS_GROUP'] == 'windows':
        unittest_env.Append(CXXFLAGS = ['/EHsc'])

    #we compile with no rtti and we are not using exceptions.
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])

    if unittest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        unittest_env.Append(CPPDEFINES = ['ANDROID'])

    # tr1::tuple is not avalible for android or darwin
    if unittest_env['OS_CONF'] in [ 'android', 'darwin' ]:
        unittest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    if unittest_env['OS_CONF'] == 'android' and unittest_env['CPU'] == 'x86':
        unittest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    if unittest_env['OS_CONF'] == 'windows' and unittest_env['MSVC_VERSION'] == '11.0':
        unittest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])
    #gtest library file is placed on folder above the the object files.
    unittest_env.Append(LIBPATH = ['./'])
    unittest_env.Prepend(LIBS = ['gtest', 'ajsecmgr', 'ajsecstorage', 'stub'])

    objs = [ unittest_env.Object(test_src) ]

    unittest_env.Append(CPPPATH = ['#/../../core/securitymgr/core/inc'])
    unittest_env.Append(CPPPATH = ['#/../../core/securitymgr/core/src'])
    unittest_env.Append(CPPPATH = ['#/../../core/securitymgr/storage/inc'])
    unittest_env.Append(CPPPATH = ['#/../../core/securitymgr/stub/inc'])

    unittest_prog = unittest_env.Program('secmgrctest', objs)
    unittest_env.Install('$C_TESTDIR/bin', unittest_prog)

    #install gtest utilities
    unittest_env.Install('$C_TESTDIR/bin', Dir('test_report').srcnode())

